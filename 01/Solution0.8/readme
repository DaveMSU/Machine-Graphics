Что нового в версии 0.8:
	* Исправлена проблема с реализацией зеркала, теперь все работает с обоснованной формулой, забывал поставить минус в скалярном произведении при подсчёте угла + внутри cast_ray везде постулировал, что |dir| = 1,
что в общем случае конечно не верно, некоррекности возникали как раз при рекурсивном вызове, где в качестве
dir подавался не 1-чный вектор.
	* Реализовано преломление, но результат сильно сомнительный, решил оставить на потом, реализовать что-то наподобии фона, затем вернуться к преломлению, чтобы было больше окружающих объектов.
	- ... 



Что нового в версии 0.7:
	* Очень сильно изменена роль функций cast_ray и scene_intersect - теперь scene_intersect возвращает pair 
<индекс ближайшей сферы, если луч пересекают какую-либо, иначе -1; расстояние до этой сферы, в случае пересеения, 
иначе -1>, а cast_ray в своей работе принимает ее результат и возваращет цвет, который должен быть в той точке, из
которой был выпушен этот луч - идея этой реструктуризации заключается в том, чтобы можно было реализовать зеркальные сферы + вообще большая модульность и независимость это всегда хорошо.
	* Реализованы зеркальные шары, добавлен флаг в атбрибуты Material
	- Функция scene_intersect возвращает копию и вообще говоря ничего не изменяет, стоит ее сделать константной и возврщать по ссылке, в целях экономии времени оставлю это на потом (!НЕ ЗАБЫТЬ ИСПРАВИТЬ!)
	- ...



Что нового в версии 0.6:
	* В scene_intersect добавлена реализация теней, считаем с побощью метода сферы .ray_intersect() пересекает ли очередной луч какую-либо сферу кроме той, цвет точки которой считаем, если True, то умножаем цвет на 0.08, иначе не меняем.
	- В процессе дебага было выявлено, что в функции ray_intersect() была ошибка, значение dist считалось через вычисление center^2, а следует L^2, оставлен корректный вариант + в ней были заменены sqrt(X*X) на X.length().
	- Для лучшего самоконтроля чуть-чуть переписал v1.0.cpp - теперь в цикле рендерятся изоображения
последовательно, т.е. имитация анимации/видео, чтобы лучше видеть как меняется освещения, блики и тени, 
контролировать, чтобы все было непрерывно.
	- ...



Что нового в версии 0.51:
	- Добавлены поля в class Material для хранения коэфициенты фонового, диффузного и зеркального освеения.
	- ...



Что нового в версии 0.5:
	* Реализованы блики, но недостаток, что в материале не хранятся способности отражать диффузный свет 
и бликовый свет, будут добавлены в версии 0.51.
	- Сильно скорректирована библиотека geometry.h, предназначенная для работы с векторами добавлено следующее - normalize() - теперь имеет другой интерфейс обращения (Vec3f normalize()), добавлен метод подсчета длины - .lenght(), перегружены следущие операторы V*=f, V/=f, V+=V, V-=V. (Соответсвенно добавлены их тесты в 
geom_tst.cpp)
	- ...



Что нового в версии 0.41:
	- Поставлены все cosnt и & там где это было помечено необходимым добавить и как следствие решением было 
добавление констаных перегрузок операторов и методов классов, проблема была в том, что не все они были определены
для констаных объектов, а передача их между функциями как констант вызывала ошибку на уровне компиляции.	
	- ...



Что нового в версии 0.4:
	* Добавили источник света в виде class Light, теперь при пересечении исходящим из камеры луча объекта, считаем вектор ' -- источкик света->точка пересечения' и 'нормаль шара в точке пересечения', косинус угла между этими векторами говорит об освещенности той точки куда падет луч из камеры, затем данное значение делиться на 4pi + q^2, 
где q - расстояние от источника света до точки на шаре, это следует из того что intensity = lim(R->0)4piRRp,
где p - плотность, кол-во фотонов на 1це площади поверхности сферы. Далее, если источников несколько то все 
суммируются и затем полученный коэфициент освященности умножается на вектор-цвет точки, которую пересек луч из камеры.
	- В Makefile добавлена опция test, которая полностью индентична all тем, что добавлен вызов Valgrind,
после чего была соотв. выявлена и исправлена ошибка использования неинициализированной переменной - if( as. && as. )
в scene_intersect().
	- Перегружен оператор 'operator*( const float )', теперь материал можно масштабировать 
(пока материал из себя представляет только цвет - ВАЖНО!).
	- В функции scene_intersect() очень много параметров, плохо читается код, поэтому перевел описание параметров
в каждой строке поотдельности (\n после каждого параметра).
	- Добавлены комментарии	и скоректированны предыдущие. (+2, *2)
	- ...



Что нового в версии 0.31:
	- Внесена в my_lib.h прототип функции bool scene_intersect(). // Почему до этого работало, не понятно.
	- Добавлены комментарии	и скоректированны предыдущие. (+10, *3)
	- Переделан метод Sphere.ray_intersect(), теперь он возвращает не bool (true - если луч пересекает, false - иначе), 
а float, dist > 0 - расстояние до сферы, если пересекает, dist = -1 - если сферу луч не пересекает.
	- В функции scene_intersect() убран flag, теперь возвращаемое значение константа (true/false).
	- ...
